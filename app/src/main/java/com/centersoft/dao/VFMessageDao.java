package com.centersoft.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.centersoft.entity.Bodies;
import com.centersoft.entity.VFMessage.Chat_typeConverter;
import com.centersoft.enums.Chat_type;

import com.centersoft.entity.VFMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VFMESSAGE".
*/
public class VFMessageDao extends AbstractDao<VFMessage, Void> {

    public static final String TABLENAME = "VFMESSAGE";

    /**
     * Properties of entity VFMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Msg_id = new Property(0, String.class, "msg_id", false, "MSG_ID");
        public final static Property Timestamp = new Property(1, Long.class, "timestamp", false, "TIMESTAMP");
        public final static Property From = new Property(2, String.class, "from", false, "FROM");
        public final static Property To = new Property(3, String.class, "to", false, "TO");
        public final static Property Chat_type = new Property(4, String.class, "chat_type", false, "CHAT_TYPE");
        public final static Property Ext = new Property(5, String.class, "ext", false, "EXT");
    }

    private DaoSession daoSession;

    private final Chat_typeConverter chat_typeConverter = new Chat_typeConverter();

    public VFMessageDao(DaoConfig config) {
        super(config);
    }
    
    public VFMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VFMESSAGE\" (" + //
                "\"MSG_ID\" TEXT," + // 0: msg_id
                "\"TIMESTAMP\" INTEGER," + // 1: timestamp
                "\"FROM\" TEXT," + // 2: from
                "\"TO\" TEXT," + // 3: to
                "\"CHAT_TYPE\" TEXT," + // 4: chat_type
                "\"EXT\" TEXT);"); // 5: ext
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VFMESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VFMessage entity) {
        stmt.clearBindings();
 
        String msg_id = entity.getMsg_id();
        if (msg_id != null) {
            stmt.bindString(1, msg_id);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(2, timestamp);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(3, from);
        }
 
        String to = entity.getTo();
        if (to != null) {
            stmt.bindString(4, to);
        }
 
        Chat_type chat_type = entity.getChat_type();
        if (chat_type != null) {
            stmt.bindString(5, chat_typeConverter.convertToDatabaseValue(chat_type));
        }
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(6, ext);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VFMessage entity) {
        stmt.clearBindings();
 
        String msg_id = entity.getMsg_id();
        if (msg_id != null) {
            stmt.bindString(1, msg_id);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(2, timestamp);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(3, from);
        }
 
        String to = entity.getTo();
        if (to != null) {
            stmt.bindString(4, to);
        }
 
        Chat_type chat_type = entity.getChat_type();
        if (chat_type != null) {
            stmt.bindString(5, chat_typeConverter.convertToDatabaseValue(chat_type));
        }
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(6, ext);
        }
    }

    @Override
    protected final void attachEntity(VFMessage entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public VFMessage readEntity(Cursor cursor, int offset) {
        VFMessage entity = new VFMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // msg_id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // timestamp
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // from
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // to
            cursor.isNull(offset + 4) ? null : chat_typeConverter.convertToEntityProperty(cursor.getString(offset + 4)), // chat_type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // ext
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VFMessage entity, int offset) {
        entity.setMsg_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTimestamp(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setFrom(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setChat_type(cursor.isNull(offset + 4) ? null : chat_typeConverter.convertToEntityProperty(cursor.getString(offset + 4)));
        entity.setExt(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(VFMessage entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(VFMessage entity) {
        return null;
    }

    @Override
    public boolean hasKey(VFMessage entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getBodiesDao().getAllColumns());
            builder.append(" FROM VFMESSAGE T");
            builder.append(" LEFT JOIN BODIES T0 ON T.\"MSG_ID\"=T0.\"ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected VFMessage loadCurrentDeep(Cursor cursor, boolean lock) {
        VFMessage entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Bodies bodies = loadCurrentOther(daoSession.getBodiesDao(), cursor, offset);
        entity.setBodies(bodies);

        return entity;    
    }

    public VFMessage loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<VFMessage> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<VFMessage> list = new ArrayList<VFMessage>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<VFMessage> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<VFMessage> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
